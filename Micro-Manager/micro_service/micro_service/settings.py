"""
Django settings for micro_service project.

Generated by 'django-admin startproject' using Django 5.2.3.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import environ
from datetime import timedelta
from utils.helper import load_key

env = environ.Env(
    DEBUG = False
)

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Load environment variables from .env file
environ.Env.read_env(env_file=BASE_DIR / "config" / "main.env")


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-a19#p#((uj7v*uq!f92y-6wv+814r#c@@clolbe1!h9ba*0*l^'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    # Security Apps
    'rest_framework_simplejwt.token_blacklist',
    "rest_framework",
    "rest_framework_simplejwt",
    "micro_manager",
    
    # System Specific
    "utils.apps.UtilsConfig",
    "corsheaders",
    
    # System Apps
    
    # Django Apps
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

MIDDLEWARE = [
    # Custom Middleware
    "corsheaders.middleware.CorsMiddleware",
    
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'micro_service.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'micro_service.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.sqlite3',
#         'NAME': BASE_DIR / 'db.sqlite3',
#     }
# }

DATABASES = {"default": env.db()}

# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = "static/"
STATIC_ROOT = BASE_DIR / "staticfiles/auth"

# STATICFILES_DIRS = [BASE_DIR / "assets"]

# Maximum upload size (in bytes)
DATA_UPLOAD_MAX_MEMORY_SIZE = 52428800  # 50 MB
FILE_UPLOAD_MAX_MEMORY_SIZE = 10485760  # 10 MB (in-memory before streamed to disk)


MEDIA_URL = "media/"
STATIC_ROOT = BASE_DIR / "staticfiles/micro"
MEDIA_ROOT = BASE_DIR / "media/micro"

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


# =====================================> Authentication Configs <===============================================#

# Service Configurations

AUTH_USER_MODEL = "micro_manager.ServiceAccount"  # Custom Service Model

# AUTH_URL = env("AUTH_URL", default="http://localhost:8080/api/v1/auth/")

# LOGIN_URL = env("LOGIN_URL", default="http://localhost:8080/api/v1/auth/login/")


# Django Backends
AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',
]

# Rest Framework
REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "rest_framework_simplejwt.authentication.JWTAuthentication",
        "rest_framework.authentication.SessionAuthentication",
    ),
    "DEFAULT_PERMISSION_CLASSES": (
        "rest_framework.permissions.IsAuthenticated",
        ),
}


# Define key paths
user_keys_path = BASE_DIR / "keys"
service_keys_path = user_keys_path / "micro"

# Load keys for users
PRIVATE_KEY = load_key(user_keys_path / "private.pem")
PUBLIC_KEY = load_key(user_keys_path / "public.pem")

SIMPLE_JWT = {
    "ALGORITHM": "RS256",
    "SIGNING_KEY": PRIVATE_KEY,  # Use private key for signing
    "VERIFYING_KEY": PUBLIC_KEY,  # Use public key for verification
    "AUTH_HEADER_TYPES": ("Bearer",),
    # ðŸ•’ Token Lifetime Settings
    "ACCESS_TOKEN_LIFETIME": timedelta(minutes=15),
    "REFRESH_TOKEN_LIFETIME": timedelta(days=1),
    "SLIDING_TOKEN_LIFETIME": timedelta(minutes=5),
    "SLIDING_TOKEN_REFRESH_LIFETIME": timedelta(days=1),
    "ROTATE_REFRESH_TOKENS": True,
    "BLACKLIST_AFTER_ROTATION": True,
    "AUTH_TOKEN_CLASSES": ("micro_manager.tokens.ServiceAccessToken",),
    "TOKEN_OBTAIN_SERIALIZER": "micro_manager.serializers.ServiceTokenObtainPairSerializer",
    "TOKEN_REFRESH_SERIALIZER": "micro_manager.serializers.ServiceTokenRefreshSerializer",
    "TOKEN_VERIFY_SERIALIZER": "micro_manager.serializers.ServiceTokenVerifySerializer",
    "TOKEN_BLACKLIST_SERIALIZER": "micro_manager.serializers.ServiceTokenBlacklistSerializer",
    "SLIDING_TOKEN_OBTAIN_SERIALIZER": "micro_manager.serializers.ServiceTokenObtainSlidingSerializer",
    "SLIDING_TOKEN_REFRESH_SERIALIZER": "micro_manager.serializers.ServiceTokenRefreshSlidingSerializer",
    
}

